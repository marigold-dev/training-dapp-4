/** 
* proxy contract
**/

type callContract = { 
  entrypointName : string, 
  payload         : bytes
};

type entrypointType = {
  method  : string,
  addr    : address
};

type entrypointOperation = {
  name        : string,
  isRemoved  : bool,
  entrypoint  : option<entrypointType> 
};

type changeVersion = {
  old : address,
  new : address
};

type storage = {
  governance : address, //admins
  entrypoints : big_map<string,entrypointType> //interface schema map
};

type parameter = 
  | ["Call",callContract] 
  | ["Upgrade",list<entrypointOperation>,option<changeVersion>] 
;

type _return = [list<operation>,storage];


// the proxy function 
const callContract = ([param,storage] : [callContract,storage]) : _return => {
    return match(Big_map.find_opt(param.entrypointName, storage.entrypoints), {
        None : () => failwith("No entrypoint found"),
        Some : (entry : entrypointType) => match(Tezos.get_contract_opt(entry.addr) as option<contract<callContract>>,{
                                            None : () => failwith("No contract found at this address"),
                                            Some : (contract : contract) => [(list([Tezos.transaction({entrypointName : entry.method, payload : param.payload}, Tezos.get_amount(), contract)]) as list<operation> ),storage]
                                        })
        });
};


/**
* Function for administrators to update entrypoints and change current contract version 
**/
const upgrade = ([param ,s] : [[list<entrypointOperation> , option<changeVersion>],storage]) : _return => { 
  
  if(Tezos.get_sender() != s.governance) {return failwith("Permission denied");} 

  let [upgraded_ep_list, changeVersionOpt] = param;

  const update_storage = ([l, m] :  [list<entrypointOperation> , big_map<string, entrypointType>]) : big_map<string, entrypointType> => {
    
    return match(l,list([
      ([] : list<entrypointOperation>) => m,
      ([x,...xs] : list<entrypointOperation>) => {
        let b : big_map<string, entrypointType> = match(x.entrypoint, {
             None : () => {if(x.isRemoved == true){return Big_map.remove(x.name,m);} else {return m;}}, //mean to remove or unchanged
             Some : (_ep : entrypointType) => { //means to add new or unchanged
                if(x.isRemoved == false){ return match(x.entrypoint,{ 
                                             None : () => m,
                                             Some : (c:entrypointType) => Big_map.update(x.name,Some(c),m)
                                            });
                }
                else {return m;}
                }
             });
        return update_storage(xs, b);
        }
    ])
    );
  };      
  
  //update the entrpoint interface map
  const new_entrypoints : big_map<string,entrypointType> = update_storage(upgraded_ep_list, s.entrypoints);

  //check if version needs to be changed
  return match(changeVersionOpt,{
   None : ()      => [(list([]) as list<operation>), {...s, entrypoints : new_entrypoints}],
   Some : (change : changeVersion) => {
                let op_change : operation = match( (Tezos.get_contract_opt(change.old) as option<contract<callContract>>), {
                         None : ()  => failwith("No contract found at this address"),
                         Some : (contract:contract) => {
                                        let amt = Tezos.get_amount();  
                                        let payload : address = change.new;
                                        return Tezos.transaction({entrypointName : "changeVersion", payload : Bytes.pack(payload)}, amt, contract);
                                        }
                        });
                return [(list([op_change]) as list<operation>), {...s, entrypoints : new_entrypoints}];
                }
 });

};

const main = ([p, s] : [parameter,storage]) : _return => {
return match(p,{
  Call    : (p : parameter) => callContract(p,s),
  Upgrade : (p : parameter) => upgrade(p,s)
  });
};

// @view
const getView = ([viewName, store] : [string, storage]) : bytes => { 
  return match( Big_map.find_opt(viewName,store.entrypoints) , {
    None : () => failwith("View "+viewName+" not declared on this proxy"),
    Some : (ep : entrypointType) => Option.unopt(Tezos.call_view("getView", viewName, ep.addr) as option<bytes>)
  });
};