#import "./pokeGame.jsligo" "PokeGame"

#import "./proxy.jsligo" "Proxy"

// reset state

const _ = Test.reset_state(2 as nat, list([]) as list<tez>);

const admin = Test.nth_bootstrap_account(0);

const sender1: address = Test.nth_bootstrap_account(1);

const _1 = Test.log("Sender 1 has balance : ");

const _2 = Test.log(Test.get_balance_of_address(sender1));

const _3 = Test.set_baker(admin);

const _4 = Test.set_source(admin);

const initial_tez = 0 as tez;

//functions

export const _testPokeGame = (
  taddr: typed_address<parameter_of Proxy, Proxy.storage>,
  entrypoint: string,
  payload: bytes,
  s: address
): unit => {
  const contr = Test.to_contract(taddr);
  const _ = Test.log("calling _testPokeGame on proxy : ");
  const _1 = Test.log(contr);
  Test.set_source(s);
  const status =
    Test.transfer_to_contract(
      contr,
      CallContract({ entrypointName: entrypoint, payload: payload }),
      0 as tez
    );
  Test.log(status)
};

//********** TESTS *************/

const testSender1Poke =
  (
    (): unit => {
      /***PROXY **/

      Test.
      set_source(admin);
      const proxy_initial_storage = {
        governance: admin, //admins
        entrypoints: Big_map.empty as
          big_map<
            string,
            Proxy.entrypointType
          > //interface schema map

      };
      const orig =
        Test.originate(contract_of(Proxy), proxy_initial_storage, initial_tez);
      const proxyContr = Test.to_contract(orig.addr);
      const proxyContrAddress = Tezos.address(proxyContr);
      /***CONTRACT **/

      Test.
      set_source(admin);
      const initial_storage = {
        pokeTraces: Map.empty as map<address, PokeGame.pokeMessage>,
        feedback: "kiss",
        ticketOwnership: Map.empty as map<address, ticket<string>>, //ticket of claims
        tzip18: {
          proxy: proxyContrAddress,
          version: 1 as nat,
          contractPrevious: None() as option<address>,
          contractNext: None() as option<address>
        }
      };
      const origContract =
        Test.originate(contract_of(PokeGame), initial_storage, initial_tez);
      const contr = Test.to_contract(origContract.addr);
      const addr = Tezos.address(contr);
      /**Upgrade proxy **/

      const status =
        Test.transfer_to_contract(
          proxyContr,
          Upgrade(
            [
              list(
                [
                  {
                    name: "Poke",
                    isRemoved: false,
                    entrypoint: Some({ method: "Poke", addr: addr })
                  },
                  {
                    name: "PokeAndGetFeedback",
                    isRemoved: false,
                    entrypoint: Some(
                      { method: "PokeAndGetFeedback", addr: addr }
                    )
                  },
                  {
                    name: "Init",
                    isRemoved: false,
                    entrypoint: Some({ method: "Init", addr: addr })
                  },
                  {
                    name: "changeVersion",
                    isRemoved: false,
                    entrypoint: Some({ method: "changeVersion", addr: addr })
                  },
                  {
                    name: "feedback",
                    isRemoved: false,
                    entrypoint: Some({ method: "feedback", addr: addr })
                  }
                ]
              ) as list<Proxy.entrypointOperation>,
              None() as option<Proxy.changeVersion>
            ]
          ),
          0 as tez
        );
      Test.log(status);
      const storeProxy: Proxy.storage =
        Test.get_storage_of_address(proxyContrAddress);
      Test.log(storeProxy);
      /** RUN TEST*/

      _testPokeGame(
        orig.addr,
        "Init",
        Bytes.pack([sender1, 10 as nat]),
        sender1
      );
      _testPokeGame(orig.addr, "Poke", (bytes `dummy`), sender1);
      const store: PokeGame.storage = Test.get_storage_of_address(addr);
      Test.log(store);
      //check poke is registered

      match(Map.find_opt(sender1, store.pokeTraces)) {
        when (Some(pokeMessage)):
          do {
            assert_with_error(
              pokeMessage.feedback == "",
              "feedback " + pokeMessage.feedback + " is not equal to expected "
              + "(empty)"
            );
            assert_with_error(
              pokeMessage.receiver == addr,
              "receiver is not equal"
            )
          }
        when (None()):
          assert_with_error(false, "don't find traces")
      }
    }
  )();
