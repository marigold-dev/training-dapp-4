#import "./tzip18.jsligo" "TZIP18"

export type pokeMessage = { receiver: address, feedback: string };

export type storage = {
  pokeTraces: map<address, pokeMessage>,
  feedback: string,
  ticketOwnership: map<address, ticket<string>>, //ticket of claims
  tzip18: TZIP18.tzip18
};

type returned_feedback = [address, string]; //address that gives feedback and a string message


type oracle_param = contract<returned_feedback>;

type parameter = { entrypointName: string, payload: bytes };

type return_ = [list<operation>, storage];

const poke = (
  _: parameter,
  [pokeTraces, feedback, ticketOwnership, tzip18]: [
    map<address, pokeMessage>,
    string,
    map<address, ticket<string>>,
    TZIP18.tzip18
  ]
): return_ => {
  //extract opt ticket from map

  const [t, tom]: [option<ticket<string>>, map<address, ticket<string>>] =
    Map.get_and_update(
      Tezos.get_source(),
      None() as option<ticket<string>>,
      ticketOwnership
    );
  return match(t) {
    when (None()):
      failwith("User does not have tickets => not allowed")
    when (Some(_t)):
      [
        list([]) as list<operation>,
        {
          //let t burn

          feedback,
          pokeTraces: Map.add(
            Tezos.get_source(),
            { receiver: Tezos.get_self_address(), feedback: "" },
            pokeTraces
          ),
          ticketOwnership: tom,
          tzip18,
        }
      ]
  };
};

@no_mutation
const pokeAndGetFeedback = (
  oracleAddress: address,
  [pokeTraces, feedback, ticketOwnership, tzip18]: [
    map<address, pokeMessage>,
    string,
    map<address, ticket<string>>,
    TZIP18.tzip18
  ]
): return_ => {
  //extract opt ticket from map

  const [t, tom]: [option<ticket<string>>, map<address, ticket<string>>] =
    Map.get_and_update(
      Tezos.get_source(),
      None() as option<ticket<string>>,
      ticketOwnership
    );
  //Read the feedback view

  let feedbackOpt: option<bytes> =
    Tezos.call_view("getView", "feedback", oracleAddress);
  return match(t) {
    when (None()):
      failwith("User does not have tickets => not allowed")
    when (Some(_t)):
      match(feedbackOpt) {
        when (Some(f)):
          do {
            let feedbackMessage = {
              receiver: oracleAddress,
              feedback: Option.unopt(Bytes.unpack(f) as option<string>),
            };
            return [
              list([]) as list<operation>,
              {
                feedback,
                pokeTraces: Map.add(
                  Tezos.get_source(),
                  feedbackMessage,
                  pokeTraces
                ),
                ticketOwnership: tom,
                tzip18,
              }
            ]
          }
        when (None()):
          failwith("Cannot find view feedback on given oracle address")
      }
  };
};

const init = (
  [a, ticketCount]: [address, nat],
  [pokeTraces, feedback, ticketOwnership, tzip18]: [
    map<address, pokeMessage>,
    string,
    map<address, ticket<string>>,
    TZIP18.tzip18
  ]
): return_ => {
  return ticketCount == (0 as nat) ? [
      list([]) as list<operation>,
      { feedback, pokeTraces, ticketOwnership, tzip18 }
    ] : [
      list([]) as list<operation>,
      {
        feedback,
        pokeTraces,
        ticketOwnership: Map.add(
          a,
          Option.unopt(Tezos.create_ticket("can_poke", ticketCount)),
          ticketOwnership
        ),
        tzip18,
      }
    ]
};

/**
 * Function called by a parent contract or administrator to set the current version on an old contract
 **/

const changeVersion = (
  newAddress: address,
  [pokeTraces, feedback, ticketOwnership, tzip18]: [
    map<address, pokeMessage>,
    string,
    map<address, ticket<string>>,
    TZIP18.tzip18
  ]
): return_ => {
  return [
    list([]) as list<operation>,
    {
      pokeTraces,
      feedback,
      ticketOwnership,
      tzip18: { ...tzip18, contractNext: Some(newAddress) },
    }
  ]
};

@view
const getView = (viewName: string, store: storage): bytes => {
  if (viewName == "feedback") {
    return Bytes.pack(store.feedback);
  } else return failwith("View " + viewName + " not found on this contract");
};

@entry
export const main = (action: parameter, store: storage): return_ => {
  //destructure the storage to avoid DUP

  const { pokeTraces, feedback, ticketOwnership, tzip18 } = store;
  const canBeCalled: bool =
    match(tzip18.contractNext) {
      when (None()):
        false // I am the last version, but I cannot be called directly (or is my proxy, see later)

      when (Some(contract)):
        do {
          if (Tezos.get_sender() == contract) {
            return true;
          } // I am not the last but a parent contract is calling me
           else {
            return false;
          }
        } // I am not the last version and a not-parent is trying to call me

    };
  if (Tezos.get_sender() != tzip18.proxy && ! canBeCalled) {
    return failwith("Only the proxy or contractNext can call this contract");
  };
  if (action.entrypointName == "Poke") {
    return poke(action, [pokeTraces, feedback, ticketOwnership, tzip18]);
  } else {
    if (action.entrypointName == "PokeAndGetFeedback") {
      return match(Bytes.unpack(action.payload) as option<address>) {
        when (None()):
          failwith("Cannot find the address parameter for PokeAndGetFeedback")
        when (Some(other)):
          pokeAndGetFeedback(
            other,
            [pokeTraces, feedback, ticketOwnership, tzip18]
          )
      };
    } else {
      if (action.entrypointName == "Init") {
        return match(Bytes.unpack(action.payload) as option<[address, nat]>) {
          when (None()):
            failwith("Cannot find the address parameter for changeVersion")
          when (Some(initParam)):
            init(
              [initParam[0], initParam[1]],
              [pokeTraces, feedback, ticketOwnership, tzip18]
            )
        };
      } else {
        if (action.entrypointName == "changeVersion") {
          return match(Bytes.unpack(action.payload) as option<address>) {
            when (None()):
              failwith("Cannot find the address parameter for changeVersion")
            when (Some(other)):
              changeVersion(
                other,
                [pokeTraces, feedback, ticketOwnership, tzip18]
              )
          };
        } else {
          return failwith("Non-existant method");
        }
      }
    }
  }
};
