export type callContract = { entrypointName: string, payload: bytes };

export type entrypointType = { method: string, addr: address };

export type entrypointOperation = {
  name: string,
  isRemoved: bool,
  entrypoint: option<entrypointType>
};

export type changeVersion = { oldAddr: address, newAddr: address };

export type storage = {
  governance: address, //admins
  entrypoints: big_map<
    string,
    entrypointType
  > //interface schema map

};

type _return = [list<operation>, storage];

// the proxy function

@entry
const callContract = (param: callContract, store: storage): _return => {
  return match(Big_map.find_opt(param.entrypointName, store.entrypoints)) {
    when (None()):
      failwith("No entrypoint found")
    when (Some(entry)):
      match(
        Tezos.get_contract_opt(entry.addr) as option<contract<callContract>>
      ) {
        when (None()):
          failwith("No contract found at this address")
        when (Some(contract)):
          [
            list(
              [
                Tezos.transaction(
                  { entrypointName: entry.method, payload: param.payload },
                  Tezos.get_amount(),
                  contract
                )
              ]
            ) as list<operation>,
            store
          ]
      }
  }
};

/**
 * Function for administrators to update entrypoints and change current contract version
 **/

@entry
const upgrade = (
  param: [list<entrypointOperation>, option<changeVersion>],
  store: storage
): _return => {
  if (Tezos.get_sender() != store.governance) {
    return failwith("Permission denied")
  };
  let [upgraded_ep_list, changeVersionOpt] = param;
  const update_storage = (
    l: list<entrypointOperation>,
    m: big_map<string, entrypointType>
  ): big_map<string, entrypointType> => {
    return match(l) {
      when ([]):
        m
      when ([x, ...xs]):
        do {
          let b: big_map<string, entrypointType> =
            match(x.entrypoint) {
              when (None()):
                do {
                  if (x.isRemoved == true) {
                    return Big_map.remove(x.name, m)
                  } else {
                    return m
                  }
                } //mean to remove or unchanged

              when (Some(_ep)):
                do {
                  //means to add new or unchanged

                  if (x.isRemoved == false) {
                    return match(x.entrypoint) {
                      when (None()):
                        m
                      when (Some(c)):
                        Big_map.update(x.name, Some(c), m)
                    }
                  } else {
                    return m
                  }
                }
            };
          return update_storage(xs, b)
        }
    }
  };
  //update the entrpoint interface map

  const new_entrypoints: big_map<string, entrypointType> =
    update_storage(upgraded_ep_list, store.entrypoints);
  //check if version needs to be changed

  return match(changeVersionOpt) {
    when (None()):
      [list([]) as list<operation>, { ...store, entrypoints: new_entrypoints }]
    when (Some(change)):
      do {
        let op_change: operation =
          match(
            Tezos.get_contract_opt(change.oldAddr) as
              option<contract<callContract>>
          ) {
            when (None()):
              failwith("No contract found at this address")
            when (Some(contract)):
              do {
                let amt = Tezos.get_amount();
                let payload: address = change.newAddr;
                return Tezos.transaction(
                  {
                    entrypointName: "changeVersion",
                    payload: Bytes.pack(payload)
                  },
                  amt,
                  contract
                )
              }
          };
        return [
          list([op_change]) as list<operation>,
          { ...store, entrypoints: new_entrypoints }
        ]
      }
  }
};

@view
export const getView = (viewName: string, store: storage): bytes => {
  return match(Big_map.find_opt(viewName, store.entrypoints)) {
    when (None()):
      failwith("View " + viewName + " not declared on this proxy")
    when (Some(ep)):
      Option.unopt(
        Tezos.call_view("getView", viewName, ep.addr) as option<bytes>
      )
  }
};
